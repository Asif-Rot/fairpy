import unittest
from fairpy.agentlist import AgentList
from main import algorithm1, algorithm2


class TestMain(unittest.TestCase):
    def test_algo1(self):
        ex1 = AgentList({"Alice": {'1': 250, '2': 250, '3': 500}, "Bob": {'1': 250, '2': 250, '3': 500},
                         "Clair": {'1': 250, '2': 500, '3': 250}})
        self.assertEqual(algorithm1(ex1, 1000, {'Alice': 250, 'Bob': 320, 'Clair': 430}),
                         (709.99, {"Alice": {1: 70}, "Bob": {2: 320}, "Clair": {3: 320}}))

        ex2 = AgentList({"Alice": {'1': 250, '2': 750}, "Bob": {'1': 250, '2': 750}})
        self.assertEqual(algorithm1(ex2, 1000, {'Alice': 600, 'Bob': 500}),
                         (918.75, {"Alice": {1: 600}, "Bob": {2: 318.75}}))

        ex3 = AgentList({"Alice": {'1': 400, '2': 600}, "Bob": {'1': 300, '2': 700}})
        self.assertEqual(algorithm1(ex3, 1000, {'Alice': 450, 'Bob': 550}),
                         (900, {"Alice": {1: 350}, "Bob": {2: 550}}))

        ex4 = AgentList({"Alice": {'1': 250, '2': 300, '3': 450}, "Bob": {'1': 300, '2': 250, '3': 450},
                         "Clair": {'1': 450, '2': 300, '3': 250}})
        self.assertEqual(algorithm1(ex4, 1000, {'Alice': 300, 'Bob': 320, 'Clair': 350}),
                         (822.25, {"Alice": {2: 180}, "Bob": {3: 300}, "Clair": {3: 342.25}}))

        ex5 = AgentList({"Alice": {'1': 300, '2': 400}, "Bob": {'1': 320, '2': 380}})
        self.assertEqual(algorithm1(ex5, 700, {'Alice': 310, 'Bob': 350}),
                         (660, {"Alice": {2: 310}, "Bob": {1: 350}}))

        # Checking zero values
        ex6 = AgentList({"Alice": {'1': 0, '2': 0}, "Bob": {'1': 0, '2': 0}})
        self.assertEqual(algorithm1(ex6, 1000, {'Alice': 250, 'Bob': 250}), {})

        # Checking wrong values
        ex7 = AgentList({"Alice": {'1': 300, '2': 250}, "Bob": {'1': 280, '2': 320}, "Clair": {'1': 400, '2': 370}})
        self.assertEqual(algorithm1(ex7, 700, {'Alice': 280, 'Bob': 290,'Clair': 380}), {})

        # Checking envy case
        ex8 = AgentList({"Alice": {'1': 400, '2': 250}, "Bob": {'1': 400, '2': 320}})
        self.assertEqual(algorithm1(ex8, 700, {'Alice': 420, 'Bob': 410}),
                         (680, {"Alice": {1: 400}, "Bob": {2: 280}}))

    def test_algo2(self):
        ex1 = AgentList({"Alice": {'1': 250, '2': 250, '3': 500}, "Bob": {'1': 250, '2': 250, '3': 500},
                         "Clair": {'1': 250, '2': 500, '3': 250}})
        self.assertEqual(algorithm2(ex1, 1000, {'Alice': 250, 'Bob': 320, 'Clair': 430}),
                         {"Alice": {1: 130}, "Bob": {2: 270}, "Clair": {3: 520}})

        ex2 = AgentList({"Alice": {'1': 250, '2': 250, '3': 500}, "Bob": {'1': 250, '2': 250, '3': 500},
                         "Clair": {'1': 250, '2': 250, '3': 500}})
        self.assertEqual(algorithm2(ex2, 1000, {'Alice': 300, 'Bob': 300, 'Clair': 300}), "no solution")

        ex3 = AgentList({"Alice": {'1': 250, '2': 750}, "Bob": {'1': 250, '2': 750}})
        self.assertEqual(algorithm2(ex3, 1000, {'Alice': 600, 'Bob': 500}),
                         {"Alice": {1: 600}, "Bob": {2: 318.75}})

        ex4 = AgentList({"Alice": {'1': 250, '2': 750}, "Bob": {'1': 350, '2': 650}})
        self.assertEqual(algorithm2(ex4, 1000, {'Alice': 500, 'Bob': 600}),
                         {{"Alice": {2: 520}, "Bob": {1: 350}}})

        # No Strongly connected component
        ex5 = AgentList({"Alice": {'1': 250, '2': 250, '3': 500}, "Bob": {'1': 250, '2': 250, '3': 500},
                         "Clair": {'1': 250, '2': 250, '3': 500}})
        self.assertEqual(algorithm2(ex5, 1000, {'Alice': 250, 'Bob': 320, 'Clair': 430}), "no solution")

        # Negative values
        ex6 = AgentList({"Alice": {'1': -250, '2': 750}, "Bob": {'1': 350, '2': -650}})
        self.assertEqual(algorithm2(ex6, 1000, {'Alice': 500, 'Bob': 600}), "no solution")

        # Zero values
        ex7 = AgentList({"Alice": {'1': 0, '2': 0}, "Bob": {'1': 0, '2': 0}})
        self.assertEqual(algorithm2(ex7, 1000, {'Alice': 250, 'Bob': 250}), "no solution")

        # Test how long take for no solution with 10 agent
        ex8 = AgentList({"a": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "b": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "c": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "d": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "e": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "f": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "g": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "h": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "i": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         "j": {'1': 250, '2': 250,'3': 250, '4': 250,'5': 250, '6': 250,'7': 250, '8': 250,'9': 250, '10': 250},
                         })
        self.assertEqual(algorithm2(ex8, 2500, {
            'a': 400, 'b': 400,
            'c': 400, 'd': 400,
            'e': 400, 'f': 400,
            'g': 400, 'h': 400,
            'i': 400, 'j': 400,
            }), "no solution")

        # Many Agent
        ex9 = AgentList(
            {"a": {'1': 100, '2': 200, '3': 300, '4': 400, '5': 500, '6': 600, '7': 700, '8': 800, '9': 900, '10': 1000},
             "b": {'1': 1000, '2': 900, '3': 800, '4': 700, '5': 600, '6': 500, '7': 400, '8': 300, '9': 200, '10': 100},
             "c": {'1': 100, '2': 1000, '3': 200, '4': 300, '5': 400, '6': 500, '7': 600, '8': 700, '9': 800, '10': 900},
             "d": {'1': 200, '2': 100, '3': 1000, '4': 400, '5': 300, '6': 500, '7': 600, '8': 700, '9': 800, '10': 900},
             "e": {'1': 300, '2': 200, '3': 400, '4': 1000, '5': 500, '6': 600, '7': 700, '8': 800, '9': 900, '10': 100},
             "f": {'1': 400, '2': 300, '3': 200, '4': 100, '5': 1000, '6': 800, '7': 600, '8': 500, '9': 700, '10': 900},
             "g": {'1': 500, '2': 900, '3': 800, '4': 700, '5': 100, '6': 1000, '7': 200, '8': 300, '9': 600, '10': 400,
             "h": {'1': 600, '2': 200, '3': 300, '4': 400, '5': 500, '6': 100, '7': 1000, '8': 800, '9': 700, '10': 900},
             "i": {'1': 700, '2': 900, '3': 800, '4': 200, '5': 300, '6': 400, '7': 100, '8': 1000, '9': 500, '10': 600},
             "j": {'1': 800, '2': 900, '3': 100, '4': 200, '5': 300, '6': 400, '7': 500, '8': 600, '9': 1000, '10': 700},
             }})
        self.assertEqual(algorithm2(ex10, 5500, {
            'a': 1000, 'b': 1000,
            'c': 1000, 'd': 1000,
            'e': 1000, 'f': 1000,
            'g': 1000, 'h': 1000,
            'i': 1000, 'j': 1000,
        }), {{
            "a": {10: 550}, "b": {1: 550},
            "c": {2: 550}, "d": {3:550 },
            "e": {4: 550}, "f": {5: 550},
            "g": {6: 550}, "h": {7: 550},
            "i": {8:550 }, "g": {9:550 },
        }})



if __name__ == '__main__':
    unittest.main()
